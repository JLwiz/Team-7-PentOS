            +----------------------------+
       	    |          CS 450            |
            |   PROJECT 3: SYSTEM CALLS  |
            |      DESIGN DOCUMENT     	 |
            +----------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jacob Lewis <lewisjw@dukes.jmu.edu>
Andrew Fryer <fryerak@dukes.jmu.edu>
Patrick Glebus <glebuspm@dukes.jmu.edu>
Ernest Tussey <tusseyel@dukes.jmu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, please give 
>> them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     SYSTEM CALLS
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
Added:

In thread struct (in thread.h):
  pid_t pid - used to identify processes.
  int exit_status - used to hold the exit status of the thread.
  bool been_waited_on - used to signal if this thread has been waited on.
  struct thread parent - the threads parent.
  struct list file_list - a list of files opened by only that thread.
  struct list child_list - a list of the threads children.
  struct list_elem child_threads - child thread list element.
  struct file file - a struct to hold file information.
  int next_fd - the next file descriptor to be used.

struct file_entry (in thread.h) - the file data of a list entry.
  int fd - the file descriptor value of the file.
  struct file file - the file struct .
  char file_name - the file name.
  struct list_elem elem - the file element in the file_list.

struct child_t (in thread.h) - the thread data of a child thread.
  tid_t child_tid - the tid of the child process.
  bool exit - used to signal if this thread has exited.
  bool waited_once - used to signal if this thread has waited once.
  bool loaded - used to signal if this thread has been loaded.
  int exit_status - used to hold this threads exit value.
  struct semaphore child_sem - used to synchronize child processes when loading or waiting is needed.
  struct list_elem elem - the child element in the child_list.

struct lock file_lock (in thread.c) - used to ensure two processes aren't accessing the files at the same time.


>> A2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
File descriptors are used to identify a file in a list and is unique to
the process. File descriptors start at 2 and increment up as a file is
open. When files are closed their file descriptors are removed from the
list, but those newly opened fds are not recycled.

---- ALGORITHMS ----

>> A3: Describe your code for reading and writing user data from the
>> kernel.
read() and write() locate a file by its file descriptor (recieved
following a call to open()). From there they either write or read
to a provided pointer to a buffer at a prescibed length or size. 
Both methods ensure the buffer region is not located in a region
of the kernel. From there a lock is acquired to prevent multiple
processes from accessing the file data simultaneously. The number
of bytes read or written is returned, which may be different than
the passed length.

>> A4: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
wait() calls process_wait() by the passed pid_t - which is casted to a tid_t. Following the process wait, its status is returned. The terminated status is returned from wait().
This notifies the caller of the associated status when a process has finished running.

>> A5: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

When a page fault occurs from a bad pointer, the parent process(es) are notified and and the process exits with code (-1) through the syscall exit function. Pointers are verified by checking their addresses in user memory with the validate_pointer(void *p) function in syscall.c. If a user interrupt, particularly a page fault, occurs due to a pointer in user memory that made its way through, the thread silently exits. This strategy allows the OS to 'clean-up' and open resources that would otherwise be held by a dead process(es).

---- SYNCHRONIZATION ----

>> A6: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
We assert that the thread calling exec is running and we await process_execute()
to return the new processes tid or -1 if the load failed on the newly made child process. We insure that the exec call does not continue without loading the child process correctly, by using a child assigned semaphore for critical section operations such as starting, loading, waiting, and exiting the process. In the case of exec, the semaphore is assigned on child thread creation and a sema_down call is made to freeze execution until start_process finishes loading it into memory; which then calls sema_up on success or failure in order to notify exec of it's completion.

>> A7: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
We use thread/process specific semaphores. For instance, P's semaphore will block in wait until it's exit is called, while C's semaphore will do the same but will operate independently of P's semaphore as to create seperate sections of mutual exclusion. Process threads also have an associated file struct that is freed upon calling and completing process_exit through our syscall close operation. We did not identify any special cases, which may be why we weren't passing the no-vm/multi-oom test.

---- RATIONALE ----

>> A8: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
We allowed the kernel to have access to user memory in order to check pointers for valid memory spaces in which user programs can be ran, this provided safety for the kernel memory as kernel specific data and information would not be overwritten by a user operation. If we didn't provide this protection the kernel information would be corrupted on many different syscalls, and in a more extreme case, could allow a user to read kernel data when they should not be allowed to. By designating the user address space with the validate_pointer function in every syscall, theres a more clear distinction between user and kernel memory which allows them to be abstracted away from eachother.

>> A9: What advantages or disadvantages can you see to your design
>> for file descriptors?
We utilized a list for file descriptors. We iterate over the list until the file
with the fd is found or NULL if no file is found. When a file is closed the file
struct is removed from the list. The advantage to this method is that it allows
fds to be stored and easily accessible. The disadvantage is the loss of O(1)
lookup when iterating over a list compared to using a hashmap for lookup. Though early on we decided that using a list would be much easier than the hashmap since we had previous experience.

Another disadvantage is that when a file is freed, the fd is not reassigned. This will create the potential for fd overflow if enough files are created; however, it makes them much easier to assign until that point is reached, and given the size limitations of pintos we didn't think that overflow limit could be easily reached. In our implementation, fd's are also thread specific such that thread(A) may have 5 assigned fds for its associated file_list, but in no way does that affect how thread(B) builds it's file_list and assigns it's fds.